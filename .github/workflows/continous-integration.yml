name: Continuous Integration

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

concurrency:
  group: continous-integration-${{ github.ref }} # branch or tag name
  cancel-in-progress: true

# SECRETS
# - GH_RELEASE_NOTES_TOKEN: personal access token of `rasabot` github account
#                           (login for account in 1pw)
# - SLACK_WEBHOOK_TOKEN: token to post to RasaHQ slack account (in 1password)
# - PYPI_TOKEN: publishing token for amn41 account, needs to be maintainer of
#               RasaHQ/rasa on pypi (account credentials in 1password)
# - DOCKERHUB_PASSWORD: password for an account with write access to the rasa
#                       repo on hub.docker.com. used to pull and upload containers
# - RASA_OSS_TELEMETRY_WRITE_KEY: key to write to segment. Used to report telemetry.
#                                 The key will be added to the distributions
# - RASA_OSS_EXCEPTION_WRITE_KEY: key to write to sentry. Used to report exceptions.
#                                 The key will be added to the distributions.
#                                 Key can be found at https://sentry.io/settings/rasahq/projects/rasa-open-source/install/python/
# - SENTRY_AUTH_TOKEN: authentication used to tell Sentry about any new releases
#                      created at https://sentry.io/settings/account/api/auth-tokens/

env:
  # needed to fix issues with boto during testing:
  # https://github.com/travis-ci/travis-ci/issues/7940
  BOTO_CONFIG: /dev/null

  IS_TAG_BUILD: ${{ startsWith(github.event.ref, 'refs/tags') }}
  DOCKERHUB_USERNAME: tmbo
  DEFAULT_PYTHON_VERSION: "3.10"

  # for wait_for_xx jobs
  WAIT_TIMEOUT_SECS: 3000
  WAIT_INTERVAL_SECS: 60

jobs:
  changes:
    name: Check for file changes
    runs-on: ubuntu-22.04
    outputs:
      # Both of the outputs below are strings but only one exists at any given time
      backend: ${{ steps.changed-files.outputs.backend || steps.run-all.outputs.backend }}
      docker: ${{ steps.changed-files.outputs.docker || steps.run-all.outputs.docker }}
      docs: ${{ steps.changed-files.outputs.docs || steps.run-all.outputs.docs }}
      is_pre_release_version: ${{ steps.rasa_check_version_type.outputs.is_pre_release_version }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        # Run the normal filters if the all-tests-required label is not set
        id: changed-files
        if: contains(github.event.pull_request.labels.*.name, 'status:all-tests-required') == false && github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/change_filters.yml
      - name: Set all filters to true if all tests are required
        # Set all filters to true if the all-tests-required label is set or if we are not in a PR
        # Bypasses all the change filters in change_filters.yml and forces all outputs to true
        id: run-all
        if: contains(github.event.pull_request.labels.*.name, 'status:all-tests-required') || github.event_name != 'pull_request'
        run: |
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "docker=true" >> $GITHUB_OUTPUT
          echo "docs=true" >> $GITHUB_OUTPUT

      - name: Check if tag version is a pre release version
        id: rasa_check_version_type
        if: env.IS_TAG_BUILD == 'true'
        run: |
          # Get current tagged Rasa version
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          if [[ "$CURRENT_TAG" =~ ^[0-9.]+$ ]]; then
            echo "is_pre_release_version=false" >> $GITHUB_OUTPUT
          else
            echo "is_pre_release_version=true" >> $GITHUB_OUTPUT
          fi

  wait_for_docs_tests:
    # Looks for doc test workflows and waits for it to complete successfully
    # Runs on pushes to main exclusively
    name: Wait for docs tests
    if: github.ref_type != 'tag'
    runs-on: ubuntu-22.04
    needs: [changes]

    steps:
      - name: Wait for doc tests
        uses: fountainhead/action-wait-for-check@297be350cf8393728ea4d4b39435c7d7ae167c93
        id: wait-for-doc-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test Documentation
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: ${{ env.WAIT_TIMEOUT_SECS }}
          intervalSeconds: ${{ env.WAIT_INTERVAL_SECS }}

      - name: Fail the step if the doc tests run could not be found
        if: ${{ steps.wait-for-doc-tests.outputs.conclusion == 'timed_out' }}
        run: |
          echo "Could not find the doc tests run."
          exit 1

  changelog:
    name: Check for changelog
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout git repository 🕝
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Assert release includes all changelog entries
        # check changelog folder only when we create pull request preparing release
        if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'prepare-release') && needs.changes.outputs.is_pre_release_version == 'false'
        working-directory: changelog
        run: |
          # List all unexpected files in changelog/
          UNEXPECTED_FILES=$(ls -A --ignore={"README.md",".gitignore","_template.md.jinja2"})

          # Exit with error if found any unexpected files
          [[ "$UNEXPECTED_FILES" ]] && \
          echo "Found the following unexpected files in changelogs/" && \
          echo "$UNEXPECTED_FILES" && \
          exit 1 || \
          echo "Release includes all changelog entries."

  build_docker_base_images_and_set_env:
    name: Build Docker base images and setup environment
    runs-on: ubuntu-22.04
    outputs:
      base_image_hash: ${{ steps.check_image.outputs.base_image_hash }}
      base_mitie_image_hash: ${{ steps.check_image.outputs.base_mitie_image_hash }}
      base_builder_image_hash: ${{ steps.check_image.outputs.base_builder_image_hash }}
      # Tag name used for images created during Docker image builds, e.g. 3886 - a PR number
      image_tag: ${{ steps.set_output.outputs.image_tag }}
      # Return 'true' if tag version is equal or higher than the latest tagged Rasa version
      is_newest_version: ${{ steps.rasa_get_version.outputs.is_newest_version }}
      
    steps:
      # Due to an issue with checking out a wrong commit, we make sure
      # to checkout HEAD commit for a pull request.
      # More details: https://github.com/actions/checkout/issues/299
      - name: Checkout pull request HEAD commit instead of merge commit 🕝
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout git repository 🕝
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        if: github.event_name != 'pull_request'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7  # v2.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5  # v2.7.0

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Login to DockerHub Registry 🔢
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin || true

      - name: Check if tag version is equal or higher than the latest tagged Rasa version
        id: rasa_get_version
        if: env.IS_TAG_BUILD == 'true'
        run: |
          # Get latest tagged Rasa version
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"
          # Fetch branch history
          git fetch --prune --unshallow
          LATEST_TAGGED_NON_ALPHA_RASA_VERSION=$(git tag | sort -r -V | grep -E "^[0-9.]+$" | head -n1)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          # Return 'true' if tag version is equal or higher than the latest tagged Rasa version
          IS_NEWEST_VERSION=$((printf '%s\n%s\n' "${LATEST_TAGGED_NON_ALPHA_RASA_VERSION}" "$CURRENT_TAG" \
            | sort -V -C && echo true || echo false) || true)
          # Avoid that the script gets released for alphas or release candidates
          if [[ "${IS_NEWEST_VERSION}" == "true" && "$CURRENT_TAG" =~ ^[0-9.]+$ ]]; then
            echo "is_newest_version=true" >> $GITHUB_OUTPUT
          else
            echo "is_newest_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if a base image exists
        id: check_image
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          # Base image
          BASE_IMAGE_HASH=${{ hashFiles('docker/Dockerfile.base') }}
          echo "base_image_hash=${BASE_IMAGE_HASH}" >> $GITHUB_OUTPUT

          BASE_IMAGE_EXISTS=$((docker manifest inspect rasa/rasa:base-${BASE_IMAGE_HASH} &> /dev/null && echo true || echo false) || true)
          echo "base_exists=${BASE_IMAGE_EXISTS}" >> $GITHUB_OUTPUT

          # Base MITIE image
          BASE_MITIE_IMAGE_HASH=${{ hashFiles('docker/Dockerfile.base-mitie') }}
          MAKEFILE_MITIE_HASH=${{ hashFiles('Makefile') }}
          echo "base_mitie_image_hash=${BASE_MITIE_IMAGE_HASH:0:50}-${MAKEFILE_MITIE_HASH:0:50}" >> $GITHUB_OUTPUT

          BASE_IMAGE_MITIE_EXISTS=$((docker manifest inspect rasa/rasa:base-mitie-${BASE_MITIE_IMAGE_HASH:0:50}-${MAKEFILE_MITIE_HASH:0:50} &> /dev/null && echo true || echo false) || true)
          echo "base_mitie_exists=${BASE_IMAGE_MITIE_EXISTS}" >> $GITHUB_OUTPUT

          # Base poetry image
          BASE_IMAGE_POETRY_EXISTS=$((docker manifest inspect rasa/rasa:base-poetry-${{ env.POETRY_VERSION }} &> /dev/null && echo true || echo false) || true)
          echo "base_poetry_exists=${BASE_IMAGE_POETRY_EXISTS}" >> $GITHUB_OUTPUT

          # Base builder image
          BASE_IMAGE_BUILDER_HASH=${{ hashFiles('docker/Dockerfile.base-builder') }}-poetry-${{ env.POETRY_VERSION }}
          echo "base_builder_image_hash=${BASE_IMAGE_BUILDER_HASH}" >> $GITHUB_OUTPUT

          BASE_IMAGE_BUILDER_EXISTS=$((docker manifest inspect rasa/rasa:base-builder-${BASE_IMAGE_BUILDER_HASH} &> /dev/null && echo true || echo false) || true)
          echo "base_builder_exists=${BASE_IMAGE_BUILDER_EXISTS}" >> $GITHUB_OUTPUT

      - name: Build Docker base image 🛠
        if: steps.check_image.outputs.base_exists == 'false' || env.IS_TAG_BUILD == 'true'
        run: |
          export IMAGE_TAG=${{ steps.check_image.outputs.base_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base

      - name: Push Docker base image if it's not building from a fork ⬆
        if: (steps.check_image.outputs.base_exists == 'false' || env.IS_TAG_BUILD == 'true') && github.event.pull_request.head.repo.owner.login == 'RasaHQ'
        run: |
          export IMAGE_TAG=${{ steps.check_image.outputs.base_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base --push

      - name: Build Docker mitie base image 🛠
        if: steps.check_image.outputs.base_mitie_exists == 'false' || steps.check_image.outputs.base_exists == 'false'
        run: |
          export IMAGE_TAG=${{ steps.check_image.outputs.base_mitie_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base-mitie

      - name: Push Docker mitie base image if it's not building from a fork ⬆
        if: (steps.check_image.outputs.base_mitie_exists == 'false' || steps.check_image.outputs.base_exists == 'false') && github.event.pull_request.head.repo.owner.login == 'RasaHQ'
        run: |
          export IMAGE_TAG=${{ steps.check_image.outputs.base_mitie_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base-mitie --push

      - name: Build Docker poetry base image 🛠
        if: steps.check_image.outputs.base_poetry_exists == 'false' || steps.check_image.outputs.base_exists == 'false'
        run: |
          export IMAGE_TAG=${{ env.POETRY_VERSION }}
          export BASE_IMAGE_HASH=${{ steps.check_image.outputs.base_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base-poetry

      - name: Push Docker poetry base image if it's not building from a fork ⬆
        if: (steps.check_image.outputs.base_poetry_exists == 'false' || steps.check_image.outputs.base_exists == 'false') && github.event.pull_request.head.repo.owner.login == 'RasaHQ'
        run: |
          export IMAGE_TAG=${{ env.POETRY_VERSION }}
          export BASE_IMAGE_HASH=${{ steps.check_image.outputs.base_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base-poetry --push

      - name: Build Docker builder base image 🛠
        if: steps.check_image.outputs.base_builder_exists == 'false' || steps.check_image.outputs.base_exists == 'false'
        run: |
          export IMAGE_TAG=${{ steps.check_image.outputs.base_builder_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base-builder

      - name: Push Docker builder base image if it's not building from a fork ⬆
        if: (steps.check_image.outputs.base_builder_exists == 'false' || steps.check_image.outputs.base_exists == 'false') && github.event.pull_request.head.repo.owner.login == 'RasaHQ'
        run: |
          export IMAGE_TAG=${{ steps.check_image.outputs.base_builder_image_hash }}
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl base-builder --push

      # Set environment variables for a pull request
      #
      # In this scenario, we've created a PR #1234
      #
      # Example output:
      # IMAGE_TAG=1234
      - name: Set environment variables - pull_request
        if: github.event_name == 'pull_request' && env.IS_TAG_BUILD == 'false'
        run: |
          echo "IMAGE_TAG=${{ github.event.number }}" >> $GITHUB_ENV

      # Set environment variables for a tag
      #
      # In this scenario, we've pushed the '2.0.6' tag
      #
      # Example output:
      # TAG_NAME=2.0.6
      # IMAGE_TAG=2.0.6
      - name: Set environment variables - push - tag
        if: github.event_name == 'push' && env.IS_TAG_BUILD == 'true'
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "IMAGE_TAG=${TAG_NAME}" >> $GITHUB_ENV

      # Set environment variables for a branch
      #
      # In this scenario, we've pushed changes into the main branch
      #
      # Example output:
      # IMAGE_TAG=main
      - name: Set environment variables - push - branch
        if: github.event_name == 'push' && env.IS_TAG_BUILD == 'false'
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SAFE_BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/} | sed 's/[\\*+.$\#\-\/]/-/g')"
          echo "IMAGE_TAG=${SAFE_BRANCH_NAME}" >> $GITHUB_ENV

      - name: Set output
        id: set_output
        run: |
          echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  docker:
    name: Build Docker
    runs-on: ubuntu-22.04
    needs: [changes, build_docker_base_images_and_set_env]
    env:
      IMAGE_TAG: ${{ needs.build_docker_base_images_and_set_env.outputs.image_tag }}
      BASE_IMAGE_HASH: ${{ needs.build_docker_base_images_and_set_env.outputs.base_image_hash }}
      BASE_MITIE_IMAGE_HASH: ${{ needs.build_docker_base_images_and_set_env.outputs.base_mitie_image_hash }}
      BASE_BUILDER_IMAGE_HASH: ${{ needs.build_docker_base_images_and_set_env.outputs.base_builder_image_hash }}

    strategy:
      matrix:
        image: [default, full, mitie-en, spacy-de, spacy-it, spacy-en]

    steps:
      # Due to an issue with checking out a wrong commit, we make sure
      # to checkout HEAD commit for a pull request.
      # More details: https://github.com/actions/checkout/issues/299
      - name: Checkout pull request HEAD commit instead of merge commit 🕝
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout git repository 🕝
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        if: github.event_name != 'pull_request'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7  # v2.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5  # v2.7.0

      - name: Free disk space
        if: needs.changes.outputs.docker == 'true'
        # tries to make sure we do not run out of disk space, see
        # https://github.community/t5/GitHub-Actions/BUG-Strange-quot-No-space-left-on-device-quot-IOExceptions-on/td-p/46101
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt clean
          docker image prune -a -f
          docker volume prune -f
          docker container prune -f
          df -h

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Echo Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to DockerHub Registry 🔢
        if: needs.changes.outputs.docker == 'true'
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin || true

      - name: Copy Segment write key to the package
        if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository == 'RasaHQ/rasa'
        env:
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.RASA_OSS_TELEMETRY_WRITE_KEY }}
          RASA_EXCEPTION_WRITE_KEY: ${{ secrets.RASA_OSS_EXCEPTION_WRITE_KEY }}
        run: |
          ./scripts/write_keys_file.sh

      - name: Build Docker image
        if: needs.changes.outputs.docker == 'true'
        run: |
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl ${{ matrix.image }}

      - name: Check how much space is left after Docker build
        run: df -h

      - name: Push image with main tag 📦
        if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'RasaHQ/rasa'
        run: |
          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl ${{ matrix.image }} --push

      - name: Push image with ${{github.ref}} tag 📦
        if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && env.IS_TAG_BUILD == 'true' && github.repository == 'RasaHQ/rasa'
        run: |
          IS_NEWEST_VERSION=${{ needs.build_docker_base_images_and_set_env.outputs.is_newest_version }}

          docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl ${{ matrix.image }} --push

          # Tag the image as latest
          if [[ "${IS_NEWEST_VERSION}" == "true" ]]; then
            if [[ "${{ matrix.image }}" == "default" ]]; then
              RELEASE_TAG="${IMAGE_TAG}"
            else
              RELEASE_TAG="${IMAGE_TAG}-${{ matrix.image }}"
            fi

            LATEST_TAG=$(echo $RELEASE_TAG | sed 's/'$IMAGE_TAG'/latest/g')
            
            # This will not build the image from ground up, but will only tag the existing image with LATEST_TAG
            IMAGE_TAG=${LATEST_TAG} docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl ${{ matrix.image }}
            # Push tagged image
            IMAGE_TAG=${LATEST_TAG} docker buildx bake --set *.platform=linux/amd64,linux/arm64 -f docker/docker-bake.hcl ${{ matrix.image }} --push
          fi
